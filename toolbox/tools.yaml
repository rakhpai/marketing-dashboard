sources:
  # Sample PostgreSQL source - update with your actual database details
  marketing-db:
    kind: postgres
    host: 127.0.0.1  # Update with your database host
    port: 5432       # Update with your database port
    database: marketing_db  # Update with your database name
    user: postgres    # Update with your database user
    password: postgres  # Update with your database password
    # Uncomment if using SSL
    # ssl_mode: require

  # BigQuery source configuration
  bigquery-analytics:
    kind: bigquery
    # Specify one of the authentication methods below:
    
    # Option 1: Using a service account key file
    credentials_file: /var/www/vhosts/fgtwelve.ltd/env_files/seo_secrets/seo-integration-key.json
    
    # Option 2: Using service account JSON inline (not recommended for production)
    # credentials_json: '{...json content...}'
    
    # Project ID (required)
    project_id: twelve-marketing-analytics
    
    # Default dataset (optional)
    dataset_id: marketing_data

  # Supabase source configuration (via PostgreSQL connection)
  supabase-marketing:
    kind: postgres
    host: db.example.supabase.co  # Replace with your Supabase host
    port: 5432
    database: postgres  # Supabase uses 'postgres' as the database name
    user: postgres      # Replace with your Supabase database user
    password: your_supabase_db_password  # Replace with your database password
    ssl_mode: require   # Supabase requires SSL

tools:
  # PostgreSQL Tools
  get-campaign-metrics:
    kind: postgres-sql
    source: marketing-db
    description: Get campaign metrics by date range and channel
    parameters:
      - name: start_date
        type: string
        description: Start date of the date range (YYYY-MM-DD)
      - name: end_date
        type: string
        description: End date of the date range (YYYY-MM-DD)
      - name: channel
        type: string
        description: Marketing channel to filter by (optional)
    statement: |
      SELECT 
        date, 
        channel, 
        SUM(impressions) as impressions, 
        SUM(clicks) as clicks, 
        SUM(conversions) as conversions, 
        SUM(revenue) as revenue
      FROM marketing_metrics
      WHERE date BETWEEN $1 AND $2
        AND ($3 IS NULL OR channel = $3)
      GROUP BY date, channel
      ORDER BY date, channel;

  get-channel-performance:
    kind: postgres-sql
    source: marketing-db
    description: Get overall performance by marketing channel
    parameters:
      - name: start_date
        type: string
        description: Start date of the date range (YYYY-MM-DD)
      - name: end_date
        type: string
        description: End date of the date range (YYYY-MM-DD)
    statement: |
      SELECT 
        channel, 
        SUM(impressions) as impressions, 
        SUM(clicks) as clicks, 
        SUM(conversions) as conversions, 
        SUM(revenue) as revenue,
        CASE WHEN SUM(impressions) > 0 THEN (SUM(clicks)::float / SUM(impressions)) ELSE 0 END as ctr,
        CASE WHEN SUM(clicks) > 0 THEN (SUM(conversions)::float / SUM(clicks)) ELSE 0 END as conversion_rate
      FROM marketing_metrics
      WHERE date BETWEEN $1 AND $2
      GROUP BY channel
      ORDER BY revenue DESC;

  # BigQuery Tools
  bq-campaign-performance:
    kind: bigquery-sql
    source: bigquery-analytics
    description: Get campaign performance metrics from BigQuery
    parameters:
      - name: start_date
        type: string
        description: Start date of the date range (YYYY-MM-DD)
      - name: end_date
        type: string
        description: End date of the date range (YYYY-MM-DD)
      - name: campaign_id
        type: string
        description: Filter by campaign ID (optional)
    statement: |
      SELECT
        campaign_name,
        campaign_id,
        DATE(date) as date,
        SUM(impressions) as impressions,
        SUM(clicks) as clicks,
        SUM(cost) as cost,
        SUM(conversions) as conversions,
        SUM(conversion_value) as conversion_value,
        SAFE_DIVIDE(SUM(clicks), SUM(impressions)) as ctr,
        SAFE_DIVIDE(SUM(cost), SUM(clicks)) as cpc,
        SAFE_DIVIDE(SUM(conversions), SUM(clicks)) as conversion_rate,
        SAFE_DIVIDE(SUM(cost), SUM(conversions)) as cost_per_conversion
      FROM
        `marketing_data.campaign_performance`
      WHERE
        DATE(date) BETWEEN @start_date AND @end_date
        AND (@campaign_id IS NULL OR campaign_id = @campaign_id)
      GROUP BY
        campaign_name, campaign_id, date
      ORDER BY
        date, campaign_name;

  bq-channel-roi:
    kind: bigquery-sql
    source: bigquery-analytics
    description: Calculate ROI by marketing channel
    parameters:
      - name: start_date
        type: string
        description: Start date of the date range (YYYY-MM-DD)
      - name: end_date
        type: string
        description: End date of the date range (YYYY-MM-DD)
    statement: |
      SELECT
        channel,
        SUM(cost) as total_cost,
        SUM(revenue) as total_revenue,
        SUM(revenue) - SUM(cost) as profit,
        (SUM(revenue) - SUM(cost)) / SUM(cost) as roi
      FROM
        `marketing_data.channel_performance`
      WHERE
        DATE(date) BETWEEN @start_date AND @end_date
      GROUP BY
        channel
      ORDER BY
        roi DESC;

  bq-keyword-performance:
    kind: bigquery-sql
    source: bigquery-analytics
    description: Get performance metrics for search keywords
    parameters:
      - name: start_date
        type: string
        description: Start date of the date range (YYYY-MM-DD)
      - name: end_date
        type: string
        description: End date of the date range (YYYY-MM-DD)
      - name: min_impressions
        type: integer
        description: Minimum impressions threshold (default 100)
    statement: |
      SELECT
        keyword,
        SUM(impressions) as impressions,
        SUM(clicks) as clicks,
        SUM(cost) as cost,
        SUM(conversions) as conversions,
        SAFE_DIVIDE(SUM(clicks), SUM(impressions)) as ctr,
        SAFE_DIVIDE(SUM(cost), SUM(clicks)) as cpc,
        SAFE_DIVIDE(SUM(conversions), SUM(clicks)) as conversion_rate,
        SAFE_DIVIDE(SUM(cost), SUM(conversions)) as cost_per_conversion
      FROM
        `marketing_data.keyword_performance`
      WHERE
        DATE(date) BETWEEN @start_date AND @end_date
      GROUP BY
        keyword
      HAVING
        impressions >= @min_impressions OR @min_impressions IS NULL
      ORDER BY
        conversions DESC;

  # Supabase Tools
  supabase-get-campaigns:
    kind: postgres-sql
    source: supabase-marketing
    description: Get marketing campaigns from Supabase
    parameters:
      - name: status
        type: string
        description: Filter by campaign status (active, paused, completed)
      - name: limit
        type: integer
        description: Maximum number of campaigns to return (default 100)
    statement: |
      SELECT 
        id, 
        name, 
        description,
        start_date,
        end_date,
        budget,
        status,
        created_at,
        updated_at
      FROM campaigns
      WHERE ($1 IS NULL OR status = $1)
      ORDER BY created_at DESC
      LIMIT $2;

  supabase-get-campaign-details:
    kind: postgres-sql
    source: supabase-marketing
    description: Get detailed information about a specific campaign
    parameters:
      - name: campaign_id
        type: string
        description: ID of the campaign
    statement: |
      SELECT 
        c.id, 
        c.name, 
        c.description,
        c.start_date,
        c.end_date,
        c.budget,
        c.status,
        c.target_audience,
        c.created_at,
        c.updated_at,
        json_agg(DISTINCT cm.channel_name) AS channels,
        json_agg(DISTINCT t.name) AS tags
      FROM campaigns c
      LEFT JOIN campaign_channels cm ON c.id = cm.campaign_id
      LEFT JOIN campaign_tags ct ON c.id = ct.campaign_id
      LEFT JOIN tags t ON ct.tag_id = t.id
      WHERE c.id = $1
      GROUP BY c.id;

  supabase-campaign-performance:
    kind: postgres-sql
    source: supabase-marketing
    description: Get performance metrics for a campaign from Supabase
    parameters:
      - name: campaign_id
        type: string
        description: ID of the campaign
      - name: start_date
        type: string
        description: Start date of the date range (YYYY-MM-DD)
      - name: end_date
        type: string
        description: End date of the date range (YYYY-MM-DD)
    statement: |
      SELECT 
        date,
        channel,
        SUM(impressions) as impressions,
        SUM(clicks) as clicks,
        SUM(conversions) as conversions,
        SUM(cost) as cost,
        SUM(revenue) as revenue,
        CASE WHEN SUM(impressions) > 0 THEN ROUND((SUM(clicks)::float / SUM(impressions))::numeric, 4) ELSE 0 END as ctr,
        CASE WHEN SUM(clicks) > 0 THEN ROUND((SUM(conversions)::float / SUM(clicks))::numeric, 4) ELSE 0 END as conversion_rate,
        CASE WHEN SUM(cost) > 0 THEN ROUND((SUM(revenue)::float / SUM(cost))::numeric, 2) ELSE 0 END as roi
      FROM campaign_metrics
      WHERE campaign_id = $1
        AND date BETWEEN $2 AND $3
      GROUP BY date, channel
      ORDER BY date, channel;

  supabase-audience-insights:
    kind: postgres-sql
    source: supabase-marketing
    description: Get audience demographics and interests from Supabase
    parameters:
      - name: campaign_id
        type: string
        description: Filter by campaign ID (optional)
      - name: start_date
        type: string
        description: Start date of the date range (YYYY-MM-DD)
      - name: end_date
        type: string
        description: End date of the date range (YYYY-MM-DD)
    statement: |
      SELECT 
        demographic_group,
        interest_category,
        SUM(reach) as reach,
        SUM(impressions) as impressions,
        SUM(clicks) as clicks,
        SUM(conversions) as conversions,
        CASE WHEN SUM(impressions) > 0 THEN ROUND((SUM(clicks)::float / SUM(impressions))::numeric, 4) ELSE 0 END as ctr,
        CASE WHEN SUM(clicks) > 0 THEN ROUND((SUM(conversions)::float / SUM(clicks))::numeric, 4) ELSE 0 END as conversion_rate
      FROM audience_insights
      WHERE ($1 IS NULL OR campaign_id = $1)
        AND date BETWEEN $2 AND $3
      GROUP BY demographic_group, interest_category
      ORDER BY reach DESC;

toolsets:
  marketing_analytics:
    - get-campaign-metrics
    - get-channel-performance
    - bq-campaign-performance
    - bq-channel-roi
    - bq-keyword-performance
    - supabase-get-campaigns
    - supabase-get-campaign-details
    - supabase-campaign-performance
    - supabase-audience-insights
  
  postgres_tools:
    - get-campaign-metrics
    - get-channel-performance
  
  bigquery_tools:
    - bq-campaign-performance
    - bq-channel-roi
    - bq-keyword-performance
    
  supabase_tools:
    - supabase-get-campaigns
    - supabase-get-campaign-details
    - supabase-campaign-performance
    - supabase-audience-insights